Cleanup (Remove spreadsheet, income, Firebase Firestore)
AddExpense
    - Remove income support
AddExpenseViewModel, AllExpensesViewModel
    - Remove support for Firebase database Firestore
    - Remove stuff related to adding edited sheet index for backup
AllExpenses
    - Remove push to Firebase Firestore
AppHelper
    - Remove Spreadsheet id methods, entitied info edited, backup info status
Constants
    - Remove unused ones
Workers
    - Remove CreateSpreadsheet, EntitiesBackup, ExpenseSync, Sync, SpreadsheetExpenseBackupService
Remove surprise message
Remove EditedSheetDao, SheetDao
Add dummy expense backup service in Injector
Remove EditedSheetRepo, SheetRepo
MainApplication
    - Remove some backup related code
    - Change SheetRepo code to Drive repo code for future if local backup needs to be moved to Google Drive
Miscellaneous
    - Remove backup, sync, spreadsheet items
SecretMessages
    - Remove entities, expense sync and backup
    - Remove income
    - Remove force month sync, surprise message
Remove SharedExpenseHelper (Firebase Firestore)
Remove SheetRequestHelper


Abstract backup service
Add an interface for Expense Backup Service
Add new worker class in Kotlin for Expenses backup that implements the above interface
Add an Injector class that only provides ExpensesBackupService for now

Recurring Expense (VI)
AddExpenseFragment
    - Add button to set RecurType
    - Remove a dedicated RecurType var from ViewModel and just use the value from Mediator live data
ExpenseDetailsFragment
    - Change date format to also show year
    - Show if expense was automatically added
RecurringExpenseInfoDao
    - Fix queries where identifier was being matched by <= instead of =
Add bottom sheet fragment to select recur type
Enqueue periodic recurring expenses runner     

Recurring Expense (V)
AddExpenseViewModel 
    - Maintain current RecurType for the expense being added/edited
    - Save recurring expense info if necessary on adding/editing expense
BaseWorker
    - Make extendable
Database    
    - Add migration to make identifier column in RecurringExpenseInfo unique
Expense
    - Make it a data class
ExpenseAdapter
    - Add an indicator to show expense was automatically added
ExpenseDao
    - Add methods to insert and get expense via identifier
RecurringExpenseRepo
    - Take in AppExecutors param to run async code from Java
RecurringExpenseInfo
    - Add unique index on identifier
RecurringExpenseDao 
    - Add method to insert or update or delete based on recur type and current existence
    - Add other methods that were needed
RecurringExpenseManager
    - Add dependency on RecurringExpenseDao and ExpenseDao
    - Add method to process adding new expenses and updating recurring expenses so that worker can just call this method
    - Make getExpenses method take in a nullable Expense because the expense could've been deleted when the job runs, in which case we can't add new copies of it
    - Add new tests
RecurringExpenseWorker
    - Add worker to process recurring expenses
    - Add Base Worker test class
Add RecurringExpenseDatabase test
Add Mock RecurringExpenseDao and ExpenseDao    

Fix bug with year filter
    - Fix bug where years in the filter view aren't distinct, instead are as many as expenses
    - Fix sorting of years

Add support for New Year
AllExpensesFragment
    - Change card view and linear layout vars type to ViewGroup
AllExpenseViewModel
    - Modify to create Filter instance using TimeZone
DateHelper
    - Add method to format month and year
    - Move method from RecurringExpenseManager to get ZonedDateTime from Instant
    - Modify methods to get max and min date for date picker to be in 4 years future and 4 past
ExpenseDao
    - Add method to get just date times of expenses
    - Deprecate methods that are used for backing up to Sheets
ExpenseDatabaseTest, Expenses, FilterTest
    - Changes from migrating Filter to Kotlin
    - Changes from Filter needing a TimeZone
    - Changes from Filter needing month as 1-12 instead of older 0-11 implementation
    - Changes from Filter needing a year along with month
ExpenseRepo
    - Add method to get date times
ExpensesBackupWorker
    - Filter time zone changes
Filter
    - Migrate to Kotlin
    - Add a time zone property
    - Change period implementation to have months and years and then create start and end time in millis periods as needed
FilterOptionsFragment
    - Add year selection
FilterOptionsViewModel
    - Changes from Filter class
    - Add year selection support
AllExpensesFragment
    - Adjust UI slightly
Period
    - New class to represent start and end time in millis for Filter

Recurring Expense (IV)
Add additional logic and documentation for recurring expenses
Support scenario where recurring expenses might not have been added for some time, in which case a
list of new expenses is returned

Recurring Expense (III)
SheetsCore
    - Use 3.2.0 that adds AddSheet response
Spreadsheet Constants
    - Add Recurring sheet's name as constant
    - Update Expense sheet range to add another column (AddType)
SheetRepository
    - Add a method to get entities live data from Spreadsheet (used to resolve account access issues)
    - Update insert expenses method to insert recurring expenses info as well to spreadsheet
    - Add a method to add new sheet (used for Recurring sheet)
Expense 
    - Fix a bug with getting expenses (via sync) from Spreadsheet where date would not get converted due to Long String type mismatch 
    - Set default isSynced value for downloaded via sync expenses as true
RecurringExpenseInfo
    - Add methods to get String list (for backup) and get object from object list (from sync)
MiscellaneousFragment
    - Add a way to restore access possibly if the error is due to UserRecoverableAuthIOException (by requesting sheet info and triggering the exception)
SheetRequestHelper
    - Add Recurring Expense info details to Insert request
    - Add AddSheet request
ExpensesBackupWorker
    - Backup RecurringExpenseInfo as well and possibly Add Recurring sheet if not exists

Disable Crashlytics in Debug

Prep for Recurring Expense (II)
Test
    - Add new test runner dependency
Database
    - Bump version to 10
    - Add new AddType column to Expense
    - Add new RecurringExpenseInfo table
RecurType
    - Renamed from RepeatType for consistency
RecurringExpenseInfo
    - New class for recurring expenses
    - Add dao, repo, manager class (business logic), dummy fragment and view model
Expense
    - Add new property for add type - manual and recur for now

Prep for Recurring Expense
Database
    - Add migration to v9 to add non column to Expense table
Expense
    - Add tests
    - Migrate methods (to from list, to from map) used for various backup mechanisms to class
    - Affects SharedExpenseManager, SheetRequestHelper
    - Move class to Kotlin class
SheetRequestHelper (for backup)
    - Use list from Expense to generate cell data

Bug fixes
Gradle
    - Move dependency versions to base gradle file
    - Add kotlin support
    - Remove legacy app module
Recurring
    - Add repeat type IntDef
Periodic work
    - Replace existing work due to enqueued issues
    - Increase invoke period to 48 hours
    - Remove setting constraints
MainApplication
    - Fix a bug that would cause edited months to always reset on app restart
Bottom Sheet Dialog
    - Fix background color that was broken in Material 1.3.0-alpha03 by going back to 1.2.0-alpha05

Add Annual Expenses Part 3
Upgrade Gradle 4.1.1
RecordType
    - Add record type None
CategoryRepo
    - Keep a mutable category list to which updates are made
    - Add method to get list for record type
Category, PaymentMethod, ListItemWrapper
    - Make it implement ListEqualizer to enable generic adapters
Filter
    - Set record type to Monthly on clear
    - Return null friendly string if record type is annual or null (to enable filter clear button)
FilterAdapter
    - Rename callback interface
ListPickerAdapter
    - Use list of ListEqualizer instead of String to make it reusable for multiple datatypes
AddExpenseFragment
    - Move categories below payment methods due to Categories header no longer being there
    - Add Monthly/Annual tab for categories
    - Adjust for ListEqualizer usage instead of Categories/PaymentMethods
FilterOptionsFragment
    - Add monthly/annual filtering
ObjectHelper
    - Add method to find index in ListEqualizer item list
AddExpenseViewModel
    - No longer transforming payment methods and categories to strings
    - Move to Category object usage in place of String to better work with RecordType
    - ^ same with PaymentMethod

Add Annual Expenses Part 2
AllExpensesViewModel
    - Make repository object final
    - Set a different identifier (GUID) on duplicated expense
    - Default to monthly expenses for filter
AppHelper
    - Add methods for if identifier has been set on older expenses
BaseRepository
    - New class to extract duplicate members
CategoryRepository
    - Filter categories for record type
    - Set categories as objects and not just strings
ExpenseRepository
    - Add method to set identifiers on expenses that don't have it
CreateSpreadsheetWorker
    - No longer convert categories and payment methods to strings from their objects
MainApplication
    - Set identifiers on older expenses and make all sheets to force upload
    - Modify default data code to have monthly categories and budgets
SetupBudgetsFragment
    - Add tabs to select monthly or annual
SetupBudgetsViewModel
    - Add record type filtering
SetupCategoriesFragment
    - Add tabs
    - (VM) Add record type filtering
SharedExpenses
    - Add record type and identifier to to and from map conversion
SheetRepository
    - Create spreadsheet with category and payment method objects and not just strings
SheetRequestHelper
    - Create spreadsheet with category and payment method objects and not just strings
    - When uploading expenses, use string value of all properties (goes hand in hand with creating expense from String properties in Expense constructor)
    - Add record type and identifier columns
    - For entities, save category and budget record type
SyncWorker
    - Adjust for another row for category record type
    - Fix a bug where budgets weren't saved

Add Annual Expenses Part 1
Budget
    - Add record type (annual or monthly) property
    - Set default record type to monthly
Category
    - Add record type (annual or monthly) property
    - Set default record type to monthly
CategoryDao
    - Add method to get categories for record type
Expense
    - Add identifier and record type properties
    - Parse date time as long instead of BigDecimal (?? for whatever reason that was done)
    - Construct amount from String instead of casting value as BigDecimal
ExpensesBackupWorker
    - Log exception as error so that crash reporting picks it up
ExpenseSyncWorker
    - Catch and log exception from parsing Expense from sheet
Filter
    - Add record type
    - Move sql building to specialized class
MiscellaneousViewModel
    - Enable backup now in debug
ObjectHelper
    - Add method to convert sparse array to list
SqlBuilder
    - Specialized class to build SQL queries
ViewModelFactory
    - Log exception as warning so crash reporting picks it up
Constants
    - Modify category, payment method, entities, budget range to accommodate additional record type column
    - Modify Expense range to accommodate record type
Db
    - Migrate to version 8
    - Adds record type columns to budget, category and expense and identifier (GUID) to expense

Gradle and artifact updates
    - Remove google json file from changelist
Rewrite/build.gradle
    - Replace Fabric with Firebase Crashlytics
    - Update compile and target SDK version to 30
    - Update Test, WorkManager, Firebase, Material, Navigation, Fragment, ConstaintLayout, AppCompat artifacts
Project/build.gradle
    - Remove fabric repo and replace its classpath with Firebase Crashlytics
    - Update gradle classpath
    - Update gradle wrapper to 6.5
CrashReportingHelper
    - New class to manage crash reporting stuff
ExpenseItem
    - Fix a weird issue with one label not properly aligned
MiscellaneousFragment
    - Show toast and log message if login fails
ReleaseTree (Timber)
    - Log Warning and Error messages to CrashReporting
Add animations from previous nav library as they were removed in new version

EOF Changes
    - From migration to Windows

Bug Fixes
PrefKeys
    - Add key for backup issue fixed
    - Remove Splitting and other unused pref keys
SecretMessages
    - Remove splitting keys
    - Add comments to helper
ExpenseDao
    - Remove setting synced false on the filter for all expenses for backup (When editing backed up expenses, the whole month's expenses should be picked up for backup but only the unsynced ones were picked)
AddExpense
    - Remove splitting button
    - (VM) When setting category or payment method, the category should exist in categories otherwise it won't be set (could happen for auto setting values)
MainApp
    - Add sheets month Mar to Aug to edited sheets so that all those expenses get backed up
    - Remove legacy prefs

Shared expenses
build.gradle
    - Use google services 4.3.3 for Firebase
PrefKeys
    - Add new keys for shared expense collection and sources
SecretMessages
    - Add keys for collection and source name setting
ExpenseRepo
    - Add method to insert multiple expenses
AllExpenses
    - Add button to fetch shared expenses
    - Add a way to push an expense to Firebase from detail view
    - Push to remote and fetch remote expenses functionality (ViewModel)
ExpensesDetail
    - Add a way to push to Firebase
SharedExpenseManager, Helper
    - New class to manage shared expenses
AddExpense
    - Push to remote a new expense when added

Surprise Message
Add a way to replace expense description with any message

Work Fixes attempt 4
Filter
    - Add method to generate query for updating sync status to false
SecretMessage
    - Add message to delete edited sheets/months (issue was a remnant edited sheet id that was assumed to be a sheet month index)
    - Add a message to set month's expenses to be unsynced so they get backed up
ExpenseDao, ExpenseRepo
    - Add method to set expenses for a month index to be unsynced
BaseWorker
    - Remove additional method to permanent log success messages
ExpensesBackupWorker
    - Remove additional log messages
    - Improve logging when exception occurs

Work Fixes attempt 3
WorkHelper
    - Use replace policy for periodic work as changes were made to Expense Backup worker
BaseWorker
    - Add new method to selectively log excess messages
ExpensesBackup
    - Add a surrounding try catch to figure out where it's failing
    - Add additional logging at every step
    - Change exits to be failure instead of success as that doesn't look like the issue

Work Fixes attempt 2
Constants
    - Make one time and periodic expense backup tags legacy
    - Add new expense backup tag for one time and periodic
AllExpensesFragment
    - Replace legacy expense backup logging with new tag
WorkHelper
    - Use new expense backup worker class for one time and periodic backup
    - Remove code to enqueue old periodic work (periodic_backup)
    - Add code to enqueue and cancel new periodic work (periodic_expenses_backup)
    - Add a way to prune work
BackupWorker
    - Rename class to ExpensesBackupWorker
    - Insert log when worker starts
MainApp
    - Cancel now legacy periodic backup
    - Remove code to cancel periodic entities backup
    - Prune work once
    - Enqueue new periodic backup
    - Remove legacy code to transition users
    - Synchronize repo getters

Work Fixes
SecretMessages
    - Add a way to set spreadsheet id
MiscellaneousFragment
    - Add a way to copy spreadsheet id by long pressing on it
MetadataFragment
    - Change how log date is printed
WorkHelper
    - Change periodic works to keep previous work
BackupWorker
    - Make work return success all the time to potentially fix the worker not failing all the time
Use WorkManager 2.4.0-beta01

Work fixes
WorkHelper
    - Add an option to schedule one time works to run at 1AM
    - Change periodic works to run at 3 in the night based on this answer - https://stackoverflow.com/a/51154271
SecretMessageHelper, MiscViewModel
    - Modify statement to still run unscheduled one time entities backup
Budget, Category, PaymentMethod edit
    - Enqueue one time scheduled entities backup if entities edited
MainApp
    - Remove statements to always cancel periodic expense backup and enqueue entities periodic backup
AnalysisViewModel
    - Show progress as over 100 (red) if value 100.32 something (>100 but <101)

UI fixes
    - Migrate button styles to styles.xml
    - Fix button corner radius when no expenses
    - No jumping around in card view when filter added

Filter changes
Filter
    - Add back a version of friendly string
AllExpenses
    - Show clear filter button
    - Add a way to clear filter
    - Adjust card info ui
FilterOptions
    - Hide clear button
DateHelper
    - Add helper to get month
AddExpense
    - Add auto complete suggestion implementation to landscape view as well (facepalm)
Made most EditText views inputtype = textNoSuggestions because of random suggestions showing up (reported by Pawan)


Filter changes
ExpenseDao
    - Remove getAllForBackup() and just use getForQuery method instead
    - Move query generation to Filter
Filter
    - Make parcelable with custom implementation
    - Convert date times to be a SparseArray so that multiple months can be added
    - Add methods to add remove category, payment method instead of set
    - Make calendar instance local so that it gets reset when adding new months
    - Move Query generation from ExpenseDao
    - Add default generation to set incomes false and current month
FilterOptions
    - Take in a Filter parameter from AllExpenses to auto fill current filters
    - Add multi selection of filters
    - Change income and flag filters to be recycler view
    - Do not dismiss fragment on filter apply so that multiple can be applied
    - Add a clear filter button
ViewModelFactory
    - Add new implementation for creating FilterOptionsViewModel

UI Changes
AddExpense
    - Change ImageView up button to Button
    - Add corner radius to buttons
Metadata
    - Change ImageView up button to Button
Misc
    - Change ImageView up button to Button
BudgetSetup
    - Change ImageView up button to Button
    - Add corner radius to buttons
CategorySetup
    - Change ImageView up button to Button
    - Add corner radius to buttons
PaymentSetup
    - Change ImageView up button to Button
    - Add corner radius to buttons
AllExpenses
    - Add corner radius to buttons
    - Shift card info UI
ExpenseDetails
    - Add corner radius to buttons

Hide backup now
PrefKeys
    - Add new pref key for backup now enabled
SecretMessages
    - Add new keys for enable disable backup now
SecretMessahesHelper
    - Move secret message code here from AppHelper
    - Make setters private
MiscVM
    - Hide backup now option

Enhance filter with multiple selection - UI (WIP)
FilterWrapper
    - New class for all the filter adapters
Rename MonthPickerAdapter to FilterAdapter
    - Use FilterWrappers instead of String in it
    - Modify callbacks to "selected" "unselected"
    - Use item layout that shows selection state
AddBudgetFragment
    - Handle an edge case where when selecting/unselecting category, category might not be found in budget's categories
FilterOptionsFragment
    - Use recycler views for all filters
    - Make all filters have option to select multiple items
    - Remove "Quick Filters" help text

Figure out why work won't work
SecretMessages
    - Add messages for cancel, enqueue work
WorkHelper
    - Add methods for cancelling one time expense and entities backup
    - Change all work policy to replace existing work
MainApplication
    - Cancel existing periodic backups and schedule new ones

Work status logging
PrefKeys
    - Add key for work log enabled
SecretMessages
    - Add new keys for work log enable and disable
AllExpensesFrag
    - Log periodic and one time expense backup work status
BaseFrag
    - Log (in db) work status if enabled
SecretMessageHelper
    - Move code of handling secret messages here from MetadataVM

Modify logo

Change logo

More Filters
ExpenseDao
    - Add methods to get categories and payment methods from saved expenses
    - Enhanced getForFilter to have payment methods, categories, starred, synced
ExpenseRepo
    - Add methods for get categories and payment methods
Expense
    - Move column names to constant fields (trial)
Filter
    - Add categories, payment methods, synced, starred filters
FilterOptions
    - Add filters for above in UI
MiscellaneousVM
    - Move some of the get account code to MainApp
MainApp
    - Init sheet repo onCreate
    - Try getting account, if not null, refresh sheet repo so that if app dies, sheet repo doesn't become null
    - Fixes an issue where after app dying, sheet repo won't refresh and workers would fail

Expense autocomplete
ExpenseDao
    - Add method to get suggestions for store starts with
    - Add method to get first expense for entered store to auto complete category and payment method
    - Add tests for both
ExpenseRepo
    - Add Stores mutable live data for store auto complete (can be revisited to be similar to getExpenseForStore)
    - Add method to refresh store suggestions
    - Add method to get expense for store
ListPickerAdapter
    - Add method set selected value so that auto complete value can be set when adding expense
AddExpense
    - Make Category and Payment adapter class member
    - Change Store EditText to AutoCompleteTextView
    - Setup autocomplete on store
    - Setup category, payment auto selection on store entry (only in add mode as user might not be aware that changing store will result in new category, payment method)
TextWatcherHelper
    - New class that implements TextWatcher so that implementors don't have to define all methods



UI improvements
Splash screen
    - Add splash screen with app logo
    - Add activity theme set to display splash screen
    - Activity theme gets updated when activity is ready to be drawn
Animations
    - Add entry exit animations for all fragments

Add get incomes filter
Filter
    - Not setting month in default constructor as date time might not always be wanted
    - Add new method to set current month as the month which just set any month on calendar
FilterOptions
    - Add button to get incomes (temp)
AllExpensesVM
    - Set current month on filter as Filter constructor no longer does it


Add income handling and filtering
PrefKeys
    - Add new key for enabling income
SecretMessage, AppHelper
    - Add income keys and helper methods
ExpenseDao
    - Update "update" transaction to set expense's income status as well
Filter
    - Initialize isIncome with false
    - Add isIncome to friendly string only if not null and true
AddExpense
    - Add income switch (toggle)
    - Enable if enabled via secret message
    - Save income expense with category as "Income"

Remove transition
Remove transition code
Enqueue periodic works on app create

UI changes
AddExpense
    - Make adaptive row count for categories and payment methods when adding new expense
    - Move split button availability to setupViews from get payment methods observer

Add income support (WIP)
Database Migration
    - To v7 to add income column to expense
Constants
    - Add INCOME constant
    - Change expenses range to A:H to include income column
ExpenseDao
    - Return non income expenses in get all (also renamed to get expenses)
    - Return non income expense in getExpensesForDateRange
    - Modify get for filter to properly get income expenses
Expense
    - Recognize income column when recreating expense from sheet
SheetRequest
    - Add income column when uploading expense
    - Fix issue with flag column where it's not taking space if not flagged and income would go in column flag

Add income to filter (WIP)
ExpenseDao
    - Add method to get results for query
    - Null check from and to date time in getAllForBackup as they are Long now instead of long
    - Add method "getForFilter" to generate the ultimate filter query
ExpenseRepo
    - Modify getForFilter method to pass down a filter to ExpenseDao method getForFilter
Filter
    - Add isIncome
    - Make from and to times Long from long
    - Change friendlyString method

Transition plan for existing users
ExpenseDao
    - Add new method to make all expenses unsynced
    - Add test for the new method
BaseFragment
    - Use getViewLifecycleOwner instead of this for work status live data logging
Create Spreadsheet
    - Add Logs sheet for future use
WorkHelper
    - Add method to cancel periodic entities backup
MiscVM
    - enqueue periodic backups when everything looks ok in backup status info
MainApplication
    - Transition plan for existing users
    - If spreadsheet Id already exists then
        - Cancel all periodic work
        - Set all expenses to unsynced so backup picks them up
        - Set first run to complete
        - Set spreadsheet id to null

Minor fixes
MiscFragment
    - Add logging for sign in process
    - Reorder post backup info status conditions to prioritize non null status from prefs
Budget Setup
    - Remove restriction on editing budget if all categories used
Use SheetsCore 3.1.1 that doesn't need full Google profile for sign in

Cleanup
Workers
    - Move logging to BaseWorker
SyncWorker (Entities)
    - Remove null checks for category and payment method repos
ExpenseDetails
    - Reduce buttons sizes
FilterFrag
    - Add bottom margin to reduce interference with system gestures

Create Spreadsheet
BackupInfoStatus
    - New constants class for status about connection to Google spreadsheets
Prefs
    - Save BackupInfoStatus on sheet operation termination
CreateSpreadsheetWork
    - New worker to create spreadsheet
SheetRepository
    - Add background executor task for spreadsheet creation (is not used)
    - Save backup info status on operation termination
BudgetSetup
    - Fix bug with empty amount when adding or editing
MiscFragment
    - Add backup info item for status on connection to Google Spreadsheets
    - Based on status, allow spreadsheet creation
    - Add code to sign into Google and get account etc
    - Add code to get sign in account and intent via MainApp context
    - Enqueue create spreadsheet work and transform status
    - Initialize sheet repo when account received
AppHelper
    - Remove get set account name and type methods (might not be needed, will evaluate)
PrefHelper
    - Use androidx PreferenceManager
SheetRequestHelper
    - Remove entities sheet index and template index from create request
    - Add months to the same request so it's not hardcoded
    - Create months sheets
    - Increase expense sheet column count to 20
    - Remove any formatting from expense sheet for cells when creating new
WorkHelper
    - Add helper methods for Create Spreadsheet work
Entities backup
    - Remove condition that skipped backup when budget size was 0
Expense Sync
    - Null checking SheetRepo
MainApp
    - Not initializing sheet repo on app create
    - Reduce sheet repo initialize code
    - Remove code to cancel periodic backup (should no longer be necessary)

UI and Misc fixes
Pref
    - Add new first setup done pref (used to add default entities)
Budget
    - Initialize categories in budget constructor
Categories and Payment methods
    - Move add edit to a bottom sheet similar to budget
AppHelper
    - Add methods for first run boolean
MainApp
    - Using first run as a way to know if default entities need to be added or not
    - Add default budgets
Setup Entities
     - Change edit and delete buttons to  be square instead of circle
     - Add coordinator layout for snackbar dismiss
MiscFrag
    - Change color od headers to teal
    - Make up button independent of rest of frag so it doesn't scroll
Modify all close and up buttons to be recommended size
AddExpense, Expense detail
    - Add tooltip to buttons with only icons
AllExpenses
    - Add coordinator layout back as Snackbar needs it to be dismissed
ExpenseDetail
    - Make buttons to be only icons so they fit better

Delete unused icons


BudgetDatabaseTest
    - New class to test budget dao
BudgetDao
    - New method to update categories when categories were deleted or edited
    - Add methods to edit, delete categories from budgets
CategoriesSetup
    - Add categories that are updated or deleted to List of Pairs
    - Run update categories in budgets method on save categories

SheetPickerAdapter
    - Rename to MonthPickerAdapter
    - Modify to use Strings
FilterOptions
    - Use MonthPickerAdapter for months
AllExpenses
    - Remove coordinator layout and made fab a child of constraintlayout due to an issue where fab would hide the bottom row of expenses

Backup synced edited expenses
SheetRepository
    - Take in SheetInfos parameter to deduce sheet id during insert getInsertRangeResponse()
DummyData
    - Add months and sheetinfos dummy data
AppHelper
    - Remove default sheet ids methods
    - Add a method to get months from string arrays
ObjectHelper
    - Add method to test if sheetinfos are valid
    - Add tests
SheetRequestHelper
    - Use AppHelper's getMonths()
    - Modify append map and update map to be formed on sheetinfos basis on the fly
BackupWorker (Expenses)
    - Remove default sheet id get from prefs
    - Allow expenses size 0 to be backed up (possible when all synced expenses for a month were edited or removed)
    - Get sheetinfos and supply it to sheet request formation
SyncWorker (Entities)
    - Remove setting default sheet id
At this point there shouldn't be any usages of Expense.sheetId within the scope of the app

Edit synced Expenses
ExpenseDao
    - modify getAllForBackup() to take in a query that is created at runtime in a transaction method
EditedSheetRepo
    - Add a member variable because of refresh issue (similar to Log)
DummyData
    - Modify expense dates to be in different months and 2020
DatePickerDialog
    - Add min and max date to restrict entry to current year only
DateHelper
    - Add method to print full date
    - Remove toDaysSinceStartOfTime() and toDay()
    - Add method to getLocalDate for time zone
    - Add getMonthIndexFromDate
    - Add methods getFirstDayOfCurrentYear and getLastDayOfCurrentYear
AddExpenseVM
    - Modify edit synced logic to consider expense's date's month index
    - Remove method to set expense sheet
AllExpensesVM
    - Save expense's date's month when synced expense is deleted
BackupWorker (Expense)
    - Rename editedSheetIds to editedMonths
    - Add unknown failure log when work fails without reason

Cleanup Database tests
    - Add new base db test class
    - Add new classes for all tables extending from the base class
    - Move code from ExpenseDatabase test to those classes
    - Move expense tests to their own methods

Add ObjectHelper class containing "contains(List<String>, String)"

Move Prefs to a StringDef class

Expense
    - No longer converting date when recreating expense from sheet as date will now be stored as it is
Filter
    - Creating Calendar instance with App's time zone
    - No longer showing the whole date in toString, for easier comparison with expense date
AppHelper
    - Add method to save and get time zone
DateHelper
    - Using app's time zone instead of device time zone
SheetRequestHelper
    - Create spreadsheet with app time zone
    - Increase expense sheet columns to 10
    - Remove any additional formatting and conditions when putting expense in sheet, they'll be saved as it is

Filter
    - Fix bug where expenses won't show up as filter looks for time >= 00:00:00.001

Filter
    - Have a calendar instance so that other classes have no knowledge of how to get the filter
    - Have code to instantiate a default filter as well as with month index and set to and from dates when month changes
AllExpensesVM, FilterOptionsVM
    - Remove Calendar instance

ExpenseDao
    - Remove method to update sheet id, modify updateExpense transaction
    - Remove method to delete all synced for sheet id
    - Remove Insert list method that deleted expenses for a sheet, now just using insert(List)
Expense
    - Remove sheet id parameter from constructor used to create instance with objects from sheet sync
    - Remove setting sheet id when making a copy via constructor
TransformationHelper
    - Modify get expense range method to return just the list of ranges
ExpenseSync
    - Deleting synced expenses before saving
    - Remove sheet id usage, now saving all expenses based on if range is correct and a row represents an expense

SheetRepo
    - Remove DriveProcessor instance
    - Remove Database instance
    - Not saving Executors object for now
    - remove all of the background thread methods for now
    - Remove copy spreadsheet code, insert range, get range, get sheet infos
MiscellaneousVM
    - Remove code to get set spreadsheet id
    - Remove SpreadsheetRepo object
    - Remove restore access code

AddExpense
    - Remove sheet selection

ExpenseDao
    - Add new method to get expenses in date range (with test)
ExpenseRepository
    - Remove method to fetch sheets from Spreadsheet
    - Add method to get expenses for a filter (only from and to date time for now)
    - Modify insertAndGet() and delete() to take in filter parameter instead of previously sheet id, so that expenses can be refreshed for the supplied filter
Filter
    - New object to create filters - right now only from and to date time
AllExpenses
    - Modify code to remove getting expenses for sheet, instead get it for to and from date time filter
    - Display name of filter applied instead of sheet name
    - Change CardView UI slightly
FilterOptions
    - Change to show months instead of sheets

Hide Entities Sync
Add an option to enable it via secret messages

Constants
    - Add BundleKeys for edit/add budget
BudgetCategoryWrapper
    - New class to manage budgets
BudgetSetupAdapter
    - Change UI to be nicer
AddBudgetFragment
    - New bottom sheet for add/edit budgets
BaseBottomSheetFragment
    - Add new base class for bottom sheets and change all bottom sheets to use this
    - Move system ui(status and nav bar flag) setting to here
MiscFrag
    - Enable budget
    - Edit item and header names
SetupBudget
    - Enable add edit delete and save
Setup Categories, Payments
    - Show snackbar when operation success
Remove BudgetSetupWrapper, ListDeleteItemAdapter, ListPickerDialog

Constants
    - Add tags for entities backup
    - Move hardcoded sheet names  here - entities, template, calculator (TransformationHelper affected)
    - Define Max size for budget categories
SheetRepository
    - Add method to insert entities in spreadsheet
Budget
    - Read only up to max size (5 for now) when recreating budget object from spreadsheet sync
SetupCategories, SetupPayments
    - Rename add edit delete methods
    - Input Edit text will be sentence case
    - Trim entered value
    - VM - save entities if changes made
    - Check if entity exists irrespective of string case
    - Set AppHelper.entitiesEdited if changes made
AppHelper
    - Add helper methods pref to get and set if entities were edited
SheetRequestHelper
    - Add method to get update cells request for entities backup
    - Move some code to create entity row from create entities sheet request to its method
    - Add method to get hardcoded months list for now
WorkHelper
    - Extract repeated code to enqueue work in a separate method
    - Add helper methods for entities backup work
BackupWorker
    - Do not initiate backup if expenses to backup size is 0
EntitiesBackupWorker
    - New work for entities backup
MainApplication
    - Enqueue entities backup periodic
MiscFragment
    - Backup entities as well on backup now pressed

Disable editing spreadsheet id

Enable Edit categories and payment methods
SetupCategories, SetupPaymentMethods
    - Move add button out of Adapter
    - Do not allow, less than 1 entities
    - Do not allow duplicate entities
    - Save entities on exit

SecretMessages
    - Add messages for enable disable expense sync (no longer needed as app in charge)
AppHelper
    - Add helper methods to enable disable expense sync
MiscFragment
    - Show expense sync only if enabled
MetadataViewModel
    - Move infer logic to switch case
    - Infer expense sync messages

BudgetRepository
    - Add method to get budget in mutable live data form
Entities
    - Add code for editing categories, budgets and payment methods (not complete)
AddExpenseFragment
    - Observe live data via getViewLifecycleOwner instead of this
    - Modify hideKeyboard method in BaseFragment to not take context parameter
MiscellaneousFragment
    - Show entities in debug app under new header
    - Move general items to top so there's less moving around of items
    - Start respective fragments for entities edit
Remove setup fragment as no longer needed
Move colors around within the file
Manifest
    - Change activity soft input mode to adjustPan but doesn't change anything I think

Fix Expense item ellipsize

Remove Toolbar/SupportActionBar from app as it caused all sorts of issues when restoring state
Add up button to MiscFragment
Add top padding to fragments

Move intDefs, Constants to a constants package
MetadataFragment
    - Make close button local var
    - Add an edit text to enable disable features on pressing delete button
MainActivity
    - Fix a bug where fragments and activity was getting recreated without restoring its state. Fix was to setup toolbar always while, setting up nav controller and graph only if saved instance state was null
AppHelper
    - Add prefs for splitting enabled boolean
CurrencyHelper
    - Modify divide method to use sMaxCurrencyPrecision instead of hardcoded 10 that resulted in 10 decimal places visible
WorkHelper
    - Modify one time works to be unique
AddExpense
    - Fix issue when a backed up expense is edited and moved to a different sheet - will result
                in expense duplicated in both sheets
    - Modify availability of splitting button based on new pref
    - Creating a copy of expense from mExpense when adding new
    - Remove code to add splitwise expense, instead it splits amount into 2 now
Analysis
    - Modify progress so that if denominator is 0, progress will be 0 not 100
    - Fix tabs having a background that's different for dark theme
    - Move tabs to left and make tab text non caps
Use latest libs across the board

DatabaseMigration
    - Add migration to v6 to add new table for edited sheets with migration test and table test
ExpenseManagerDbTest
    - Fix a Expense table test
ExpenseDao
    - Add a method to get expenses for backup (expenses from edited sheets and new ones)
SheetRepository
    - Add an overload method to insert a range that takes in edited sheet ids as parameter
ExpenseDetailsFragment
    - Remove disabling of edit and delete buttons for backed up expenses
    - Made edit, delete, clone buttons not all caps
SheetRequestHelper
    - Modify update request method to get UpdateCellsRequest object as well
    - Move expense row data generation code to its own method
    - Add new method to create a map of edited sheets and its expenses
AddExpense
    - Create a copy object properly when editing expense
    - Add a new row in EditedSheets if edited expense was a backed up expense
AllExpenses
    - Add a new row in EditedSheets if deleted expense was a backed up expense
BackupWorker
    - Get edited sheets and generate request accordingly
    - Delete all edited sheets after a successful backup
    - Insert a log if backup throws an exception
[Has a known issue when a backed up expense is edited and moved to a different sheet - will result
in expense duplicated in both sheets]

LogRepository
    - Fix get logs by adding a way to refresh them manually
BarAdapter
    - Show green when you have used the max value but haven't gone over
AllExpenses
    - Show "Edit" snack bar after clone indefinitely
BaseFragment
    - Insert only the status of work to logs
MetadataFragment
    - Refresh logs on start and on deletion
MiscFragment
    - Remove work status logging
    - Enable hidden options when debug build
MainApplication
    - Cancel periodic backup in debug builds
AddExpense
    - Change date button to not be all caps
AnalysisFragment
    - Center and scrollable tab view so it fits all devices

BaseFragment
    - Insert log to db for work status
MetadataFragment
    - Prevent back click that closes app - now will go up
    - Increase lines for metadata items so that whole log is visible
MiscellaneousFragment
    - Log legacy and new scheduled backup status
    - Remove auto backup menu option
    - Hide edit entities menu option for now
AppHelper
    - Remove Auto backup pref helper methods
DateHelper
    - Add method to get initial delay for periodic backup work with unit test
WorkHelper
    - Rearrange some code
    - Add a way to cancel old periodic work (that ran when auto backup toggle was changed) and enqueue new periodic work (runs around 2AM)
Constants
    - Remove log type constants - use work type wherever necessary
MainApplication
    - Cancel legacy periodic work and enqueue new periodic work

ExpenseAdapter
    - Remove unnecessary code
    - Remove sync status
    - Add color to amount for debug builds to show sync status
AllExpensesFragment
    - Move calculation code to Calculator
    - No longer show not backed up count
Calculator
    - Modify to calculate everything or just total expense amount

Miscellaneous Fragment
    - Hid all spreadsheet related options - backup, sync, spreadsheet id
    - Can be enabled by tapping 7 times on version info
    - Reset enablement on fragment start
AppHelper
    - Remove unused code - enable hidden options and migration step

Add a way to start edit entities (SetupFrag)

Add a way to add splitwise expense
    - Add toggle to add a duplicate split by 2 expense

CategoryRepo, PaymentMethodRepo
    - Remove source type variable
    - Add new method to get mutable list
ListPickerMultiSelectionAdapter
    - New adapter with item deletion capability
SetupFragment
    - Repurpose fragment to edit categories, payment methods and budgets (Incomplete)
MainActivity
    - Make AllExpensesFrag the default start destination
SheetRequestHelper
    - Made changes to entities sheet creation to include budgets (Not tested)
MainApplication
    - Add default categories and payment methods from string arrays file if spreadsheet id not set (assumes it's first time). This logic will need to be adjusted if entities are set manually but spreadsheet id still not set
Change primary and teal color for night theme

AddExpense
    - Reduce collapse expand icon size
AllExpenses
    - Bring back analysis bottom sheet expand icon
Make teal primary color and change it to be same as one stock app's color

AddExpenseFragment
    - Change sheets list view to be a grid
    - Move it to an expanding card view at the top
    - Move Save button to bottom (Portrait)

BarAdapter
    - Show different color when progress is >=100
    - Reduce animation speed to 1500ms
    - Change item ui
BarWrapper
    - Remove Value3
    - Rename Value 1 and 2 to something more meaningful
AllExpenses
    - Remove 3 dot menu button
    - Move buttons to LinearLayout
AnalysisFragment
    - Change item ui
    - Add an indicator that sheet opens
    - Send progress value as 100 when dividing by 0
CurrencyHelper
    - Change "strip zeros" logic
    - Add unit test
    -

AllExpensesFrag
    - Remove analysis, setup and filter buttons from CardView
    - Add a menu button in place
    - Implement onClickListener and move button clicks to bottom of class

SheetRepository
    Add method to get data from multiple ranges
MiscFragment
    Add new option to sync expenses
    Move log and delete options to General section
TransformationHelper
    Add a method to convert list of sheet info to map of sheet name (key) and id (value)
WorkHelper
    Add method to get OneTimeExpenseSyncWorker's tag
    Add method to enqueue OneTimeExpenseSyncWorker
ExpenseSyncWorker
    New worker to get expenses from multiple ranges and save them in db
Use SheetsCore 3.1.0

SheetDao
    add a way to get name of sheet from id
SheetRepository
    comment instance creation for DriveProcessor (not needed for now)
    get sheet name from dao
SheetPickerAdapter
    fix default selection for filter
FilterOptionsFragment
    add viewmodel, getting sheets from VM and not arguments
AllExpensesFragment
    remove progress bar, refresh view, moved buttons around
    add Add button for when no expenses
    modify card info view
AllExpensesViewModel
    remove getting sheet infos, just get sheet name for sheet id
    cleanup


ExpenseDao
    add method to get expenses for sheet id
    add abstract method to delete existing backed up expenses for sheet id, and add new ones
    rearranged stuff
ExpenseRepo
    remove local data source stuff
    move methods from ExpenseSheetsRepo here
    add a way to get expenses from Spreadsheet and save it to db
    rename some methods
ExpenseAdapter
    remove method to get expenses from expense wrappers
    add sync status image for not backed up expenses
AllExpenseFragment
    move stuff from ExpenseFrag here
    add refreshlayout to fetch from spreadsheet
    add add expense button
    add a way to edit and delete expense (only non backed up ones)
AnalysisFragment
    fix nav bar button color getting all white
MiscFragment
    show action bar since bottom nav is gone
MainActivity
    remove bottom nav
AllExpenseViwModel
    remove expense sheets repo
    expense repo does everything
MainApplication
    remove ExpenseSheetsRepo
ExpenseItem
    switch places of category and store
    add sync status image
Remove ExpensesFragment

- Delete default sheet id migration code from MainActivity
- Set default sheet id if not set in syncworker
- Set default visibility of new analysis and filter buttons to gone


- Add a way to get list of expenses from ExpenseAdapter
- Add secondary modify filter button when no expenses are available
- Show analysis of selected expenses
- Add Analysis fragment to show calculated values
- Add total values for budget, payments, categories in Calculator
- Add method to CurrencyHelper to strip trailing zeros
- Add method to CurrencyHelper to divide BigDecimals
- Add a way to get ViewModel with List<Expense> parameter to ViewModelFactory
- Change night red color to be same as light red color

- Move filter button to be below card view in all expenses
- Add Analysis button
- Remove change sheet button
- Rename Change Sheet frag to FilterOptions
- Remove top bottom padding on all views

- Add budget dummy data
- Move UNDEFINED Int constant to subclass in Constants
- Move to using limited scope full time
- Add Calculator to calculate values for categories, payment methods and budget and log them

- Db version to 5
- Add db migration
- Add Budget table, dao, repository
- Add list converter for string list objects in room table
- Remove max entities limit when getting entities so that budgets can be read
- Sync budgets in SyncWorker
- Add gson library used for listconverter

- Add ripple to misc frag items for touch effect

- Remove some of migrate code as not needed
- Change night red color to be lighter
- Remove sheets from metadata

- Add migrate option
-   Will create a copy of existing spreadsheet from within the app so app can access it with lesser permissions
-   Steps
       1. Go to Setup tab at the bottom
       2. Tap migrate
       3. Wait for Spreadsheet Id to be refreshed. Don't close the app until the migrate button reads "Tap to restore access"
       4. Close the app
       5. Go to https://myaccount.google.com/u/0/permissions and remove access to Expense Manager
       6. Wait for like 10 mins
       7. Go to Setup tab
       8. Tap Migrate again
       9. Make sure you see the new screen to grant reduced permissions
       10. Tap allow
       11. Tap Sync
       12. Turn on and off Auto Backup (if you want it on)
       13. Add a new expense and tap backup now to make sure everything is working
- Change no expenses text color in history tab
- Add DriveProcess instance to SheetRepository
- Add a method to refresh processor instances (MainApp and SheetRepo)
- Add methods to get create (with entities and template) spreadsheet and copy file requests
- Use SheetsCore 3.0.0

- Change color of new expenses fragment to have red instead of teal
- Change icon and names of bottom tabs (icon - all tab, names - all, misc tab)

- Fix spreadsheet Id being null because  it was saved after it was needed

- Fix calls to SheetProcessor methods that didn't send  SpreadsheetId

- Change Version Info string to be correct case
- Fix Change Sheet button jumping around
- Null check objects list in ExpenseSheetsRepository
- Change to ONE_OF_RANGE for categories & payments so that they can be picked from sheet itself

- Center change sheets fragment grid

- Move AutoBackup, Version info, Spreadsheet Id, theme selector to Misc fragment
- Fix edit text full screen view in landscape
- Add DialogHelper methods to show dialog with edit text and with radio list
- Set default theme on main activity create to fix theme resetting on <Q

- Add progress bar animation to all expenses
- Add null checks for sheet repository get methods

- Fix crash when a sheet doesn't have any expenses
- Set "No expenses" text in all expenses

- Change Bottom nav view bg color

- Sticky header for expenses
- Update library versions for a bunch of libraries

- Change List adapter item style (list_picker_item)
- Change all expenses layout to use fab and similar layout to expenses
- Subclass ExpenseSheetsRepository from ExpenseRepository
- Add info about disabled edit and delete in details
- Show details for backed up expenses as well

- Prevent selecting bottom nav tab if already on selected

- Duplicate expense
- Add new method to Expense Dao to insert and get new expense via @Transaction
- Add copy constructor to Expense
- Add new duplicate callback to detail fragment

- Bottom Nav - add new, all and extra tab
- Remove toolbar in fragments except settings, do not show it in some frags in onStop
- Delete motion layout transition stuff
- Delete unneeded views in ExpensesFrag
- Center align no expenses message
- Update unsynced to synced on backup
- Get unsynced in expenses fragment
- Get expenses from sheets
- Fix (from sheets date) in DateHelper
- Add ExpenseSheets repo to do both expense db and sheets stuff
- Add new Expense constructor to create object from List<Object>
- Fix reconstructing payment method and category from parcel
- Move overflow menu options to new Frag (Miscellaneous)

- Modify text sizes

- Remove backup button from expenses frag (was already hidden)
- Cleanup

- Remove way to get sheets in MetadataFrag

- Update warning dialogs to have no title and change buttons for delete warning
- Adjust expense list header ui
- Change default store and description value
- Remove hidden option Jess

- Enable hidden option for Jess

- Fix flag icon margin top in expense item
- Handle back click so app doesn't close in one of the fragments
- Change "No Expenses" text to "No new expenses"
- Change flag button's style
- Fix potential crash due to no changes done for flag functionality in landscape ui in add expense

- Adapt info height in expenses screen
- Swap category and payment method positions in expense list
- Add flag implementation
- Migrate date layout card to use material button instead
- Update expense updates sync and star status as well
- Send flag column value to spreadsheet

- Fix default sheet selection bug
- Rename AddExpenseViewModel methods to remove expense from name
- Use expense instance from ViewModel instead of what's received as argument in Add Expense fragment
- Add landscape support to expenses, add expense
- Fix status and nav bar color issues
- Change bottom sheet dialog color

- Modify SheetRequestHelper to generate multiple requests with sheet ids from expenses
- Change settings fragment string version info
- Remove settings pref current sheet id
- Add AppHelper.defaultSheetId
- Reduce spacing in add expense fragment layout
- Hide no expenses help message
- Add SheetInfo table
- Add SheetInfo get to SheetRepository with boolean to decide whether to fetch from Google sheet
- Modify SheetRepo constructor to take in Database object
- Move Save button to top
- Add SyncWorker to get info from sheet
- Add a way to sync data from Sheets in MainActivity
- Update ExpenseDao.updateExpense() to update sheet id

- Fix crash amount formatting
- Fix crash with hint on edit text with layout

- Use extended fab for add expense and save expense
- Made visibility gone on "down arrow to indicate add expense button"
- Add new column "sheet_id" to Expense (with migration and tests)

- Fix crash due to SheetRepo null in SetupFragment.
- Add a new public method in MainApp to initialize SheetRepo

- Enabled nav and status bar transparency in theme for API 29

- Deleting expenses directly via database class instead of via repository after backup success
- Made init repo methods private in MainApplication and calling them in onCreate()
- Add a fragment to view logs and sheets in debug mode (or special access mode)
- Add currency format helper and route all big decimals via that class
- Add delete all logs capability
- Move exitToUp() to BaseFragment
- Add version info to settings which can be tapped 7 times to enable hidden options
- Use sheetscore 1.4.0

- Add card view around expense info textviews in expenses fragment
- Fix bug where all expenses will get deleted when single expenses is deleted

- Changed colors for dark and night themes
- Fix theme by battery saver on Android < Q

- Cleanup pref access and set mechanism by adding a AppHelper to read/write prefs
- Add a WorkHelper to route WorkManager requests
- Auto backup toggle in settings works now
- Moved work status logging to onViewCreated in Expenses Fragment
- Changed backup period to 1 day from 12 hours
- Theme toggle works now
- Set default theme according to version code
- Fix bug where default category and payment method won't get selected in the saved expense
- Added a way to delete expense
- Hide Overflow menu button in Settings
- Added a way to backup now when auto backup is enabled
- Added Log table to db and its accompanying migration (with test)
- Added logs for backup success/failure
- Hid Sync now button and made options menu always available
- Add information from expenses to text views
- Change Activity soft input mode to AdjustResize so FAB goes over keyboard
- Add views for when expenses empty
- Add a way to delete all expenses in debug build

